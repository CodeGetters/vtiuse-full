# 工作流名称：自动依赖更新
name: Auto Dependency Update

# 触发条件
on:
  schedule:
    # 每天凌晨 2 点运行（UTC 时间，北京时间 10 点）
    - cron: "0 2 * * *"
  workflow_dispatch: # 允许手动在 GitHub Actions 界面触发

# 定义工作流程
jobs:
  update-dependencies:
    # 指定运行环境为最新版 Ubuntu
    runs-on: ubuntu-latest

    steps:
      # 步骤 1：检出代码仓库
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # 获取完整的 git 历史记录，用于检查最后提交时间

      # 步骤 2：检查最后一次提交距现在的时间
      - name: Check last commit time
        id: check-time
        run: |
          # 获取最后一次提交的时间戳
          LAST_COMMIT_TIME=$(git log -1 --format=%ct)
          # 获取当前时间戳
          CURRENT_TIME=$(date +%s)
          # 计算距离最后一次提交的小时数
          HOURS_SINCE_LAST_COMMIT=$(( ($CURRENT_TIME - $LAST_COMMIT_TIME) / 3600 ))
          # 如果超过 24*7=168 小时，则设置更新标志为 true
          if [ $HOURS_SINCE_LAST_COMMIT -gt 168 ]; then
            echo "should_update=true" >> $GITHUB_OUTPUT
          else
            echo "should_update=false" >> $GITHUB_OUTPUT
          fi

      # 步骤 3：设置 Node.js 环境
      - name: Setup Node.js
        if: steps.check-time.outputs.should_update == 'true' # 仅在需要更新时执行
        uses: actions/setup-node@v3
        with:
          node-version: "20" # 使用 Node.js 18.x 版本

      # 步骤 4：更新依赖
      - name: Update dependencies
        if: steps.check-time.outputs.should_update == 'true' # 仅在需要更新时执行
        run: |
          pnpm update    # 更新所有依赖到最新版本
          pnpm install  # 安装更新后的依赖

      # 步骤 5：创建拉取请求
      - name: Create Pull Request
        if: steps.check-time.outputs.should_update == 'true' # 仅在需要更新时执行
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # 使用 GitHub 提供的 token
          commit-message: "chore(deps): update dependencies" # 提交信息
          title: "🤖 Auto Dependency Update" # PR 标题
          body: | # PR 描述
            自动依赖更新

            - 更新所有过时的依赖项
            - 由依赖更新机器人自动创建
          branch: auto-dependency-update # 创建新分支
          delete-branch: true # 在 PR 合并后删除分支
